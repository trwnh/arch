#!/bin/bash
# $ iwctl station wlan0 connect {SSID}
HOSTNAME=17z90p
USERNAME=trwnh
TIMEZONE=America/Chicago
DISKID=nvme-Samsung_SSD_970_EVO_Plus_1TB_S6S1NG0R621780A
DEV=/dev/disk/by-id/$DISKID
PACKAGES="
`#hardware support`
	intel-ucode vulkan-intel acpi bluez powertop iwd
`#basic utilities`
	bash nano openssh wget rsync git zip unzip unrar nmap htop archey3
`#dev`
	docker docker-compose go rust hugo zola
`#networking`
	networkmanager samba nfs-utils
`#audio`
	pipewire pipewire-pulse pipewire-jack pipewire-alsa pipewire-v4l2 sof-firmware realtime-privileges
`#files and devices`
	ntfs-3g exfat-utils android-tools android-udev cups cups-pdf qmk
`#fonts`
	terminus-font
	ttf-droid ttf-roboto noto-fonts noto-fonts-extra noto-fonts-cjk
	ttf-fira-code otf-fira-sans otf-fira-mono
	ttf-inconsolata
	adobe-source-code-pro-fonts adobe-source-sans-pro-fonts adobe-source-serif-pro-fonts
	ttf-nerd-fonts-symbols
	ttf-dejavu
	inter-font
`#sway`
	sway
	wayland xorg-xwayland qt5-wayland
	brightnessctl
	mako
	slurp grim jq wl-clipboard
	waybar
	imv mpv rofi alacritty
	thunar thunar-volman gvfs file-roller ffmpegthumbnailer
`#xfce`
	gdm xfce4 xfce4-goodies plank
`#gnome`
	gnome gnome-tweaks polkit-gnome
`#desktop`
	nm-connection-editor network-manager-applet pavucontrol
	firefox-developer-edition chromium youtube-dl
	code
	quassel-client discord telegram-desktop mumble dino
	obs-studio libva-intel-driver v4l2loopback-dkms
	gimp krita inkscape blender pitivi audacity
	bitwarden trash-cli
`#theming`
	materia-gtk-theme materia-kde kvantum kvantum-theme-materia
"
AUR="
`#more fonts`
	noto-fonts-emoji-blob ttf-roboto-slab
	ttf-amiri ttf-arabeyes-fonts ttf-qurancomplex-fonts ttf-sil-lateef ttf-sil-scheherazade
`#more sway`
	rofi-dmenu
`#more xfce`
	mugshot xfce4-docklike-plugin xmousepasteblock-git xfce4-windowck-plugin-xfwm4-theme-support `#vala-panel-appmenu-xfce is causing build errors`
`#more gnome`
	gnome-shell-extension-dash-to-dock
`#more desktop`
	enpass-bin sublime-music
	checkra1n-cli
	syncthing-gtk-python3
	faenza-icon-theme
`#zfs snapshots and replication`
	sanoid lzop mbuffer pv
"

sed -i 's/^#Color/Color/g' /etc/pacman.conf
sed -i 's/#ParallelDownloads = 5/ParallelDownloads = 20/' /etc/pacman.conf

echo "Setting time sync..."
timedatectl set-ntp true

echo "Enabling archzfs..."
curl -s https://eoli3n.github.io/archzfs/init | bash

echo "Partitioning disk..."
sgdisk -Z $DEV
parted -s $DEV mklabel gpt
sgdisk -n 1:0:+2G -t 1:ef00 -c 1:"ESP" $DEV \
       -n 2:0:+32G -t 2:8200 -c 2:"SWAP" $DEV \
       -n 3:0:0 -t 3:bf00 -c 3:"RPOOL" $DEV \
sleep 3
partprobe $DEV
sleep 3

echo "Making legacy filesystems..."
mkfs.fat -F32 -n "EFI" /dev/disk/by-partlabel/ESP
mkswap -L "SWAP" /dev/disk/by-partlabel/SWAP


echo "Making root zpool..."
#================ rpool with compression and encryption ================#
zpool create -f \
	-o ashift=12              \
	-O acltype=posixacl       \
	-O relatime=on            \
	-O xattr=sa               \
	-O dnodesize=legacy       \
	-O normalization=formD    \
	-O mountpoint=none        \
	-O canmount=off           \
	-O devices=off            \
	-O compression=lz4        \
	-O encryption=aes-256-gcm \
	-O keyformat=passphrase   \
	-O keylocation=prompt     \
	-R /mnt                   \
rpool /dev/disk/by-partlabel/RPOOL

echo "Making ZFS datasets..."
#================================ boot environment = arch ================================#
zfs create -o canmount=off -o mountpoint=none rpool/ROOT
zfs create -o canmount=off -o mountpoint=none rpool/DATA
zfs create -o canmount=noauto -o mountpoint=/     rpool/ROOT/arch
zpool set bootfs=rpool/ROOT/arch rpool
zfs mount rpool/ROOT/arch
#================================ persistent data ================================#
zfs create -o mountpoint=/home rpool/DATA/home
zfs create -o mountpoint=/root rpool/DATA/home/root
chmod 700 /mnt/root
zfs create -o mountpoint=none                     rpool/DATA/var
zfs create -o mountpoint=/var/lib -o canmount=off rpool/DATA/var/lib
zfs create                                        rpool/DATA/var/lib/AccountsService
zfs create                                        rpool/DATA/var/lib/libvirt
zfs create                                        rpool/DATA/var/lib/lxc
zfs create                                        rpool/DATA/var/lib/portables
zfs create                                        rpool/DATA/var/lib/machines
zfs create                                        rpool/DATA/var/lib/pacman
zfs create -o com.sun:auto-snapshot=false         rpool/DATA/var/lib/docker
zfs create -o com.sun:auto-snapshot=false         rpool/DATA/var/lib/nfs
zfs create -o mountpoint=/var/log                 rpool/DATA/var/log
zfs create -o mountpoint=/var/spool               rpool/DATA/var/spool
zfs create                                        rpool/DATA/var/spool/mail
zfs create -o mountpoint=/var/snap                rpool/DATA/var/snap
zfs create -o mountpoint=/var/games               rpool/DATA/var/games
zfs create -o mountpoint=/var/www                 rpool/DATA/var/www
zfs create -o mountpoint=/srv                     rpool/DATA/srv
zfs create -o mountpoint=/opt                     rpool/DATA/opt
zfs create -o mountpoint=/usr -o canmount=off     rpool/DATA/usr
zfs create                                        rpool/DATA/usr/local
#================================ cache and temporary files ================================#
zfs create -o mountpoint=/var/cache -o com.sun:auto-snapshot=false rpool/DATA/var/cache
zfs create -o mountpoint=/var/tmp   -o com.sun:auto-snapshot=false rpool/DATA/var/tmp
zfs create -o mountpoint=/tmp       -o com.sun:auto-snapshot=false rpool/DATA/tmp
chmod 1777 /mnt/tmp
chmod 1777 /mnt/var/tmp

echo -n "Mounting legacy filesystems... "
swapon -L "SWAP"
mkdir -p /mnt/boot/efi
mount -L "EFI" /mnt/boot/efi
echo "done."

echo "Updating pacman mirrorlist..."
pacman -Sy
pacman -S reflector --noconfirm
echo "Sorting mirrorlist..."
reflector --country 'US' -p https --sort rate --save /etc/pacman.d/mirrorlist --verbose
echo "Pacman mirrors synced and sorted."

echo "Bootstrapping mounted system..."
pacstrap /mnt base base-devel linux linux-headers linux-lts linux-lts-headers
#VERSION=$(pacman -Si zfs-linux \
#| grep 'Depends On' \
#| sed "s|.*linux=||" \
#| awk '{ print $1 }')
#VERSION_LTS=$(pacman -Si zfs-linux-lts \
#| grep 'Depends On' \
#| sed "s|.*linux-lts=||" \
#| awk '{ print $1 }')
#if [ ${VERSION} = \
#$(pacman -Si linux | grep Version | awk '{ print $3 }') ]; then
# pacstrap /mnt linux linux-headers
#else
# pacstrap -U /mnt \
# https://archive.archlinux.org/packages/l/linux/linux-${VERSION}-x86_64.pkg.tar.zst \
# https://archive.archlinux.org/packages/l/linux/linux-headers-${VERSION}-x86_64.pkg.tar.zst
#fi
#if [ ${VERSION_LTS} = \
#$(pacman -Si linux-lts | grep Version | awk '{ print $3 }') ]; then
# pacstrap /mnt linux-lts linux-lts-headers
#else
# pacstrap -U /mnt \
# https://archive.archlinux.org/packages/l/linux-lts/linux-lts-${VERSION_LTS}-x86_64.pkg.tar.zst \
# https://archive.archlinux.org/packages/l/linux-lts/linux-lts-headers-${VERSION_LTS}-x86_64.pkg.tar.zst
#fi
pacstrap /mnt zfs-dkms zfs-utils linux-firmware refind efibootmgr os-prober mkinitcpio
pacstrap /mnt $PACKAGES
echo "Packages installed."

echo -n "Generating filesystem mount table... "
#genfstab -U /mnt >> /mnt/etc/fstab
cat <<EOF > /mnt/etc/fstab
LABEL=EFI /boot/efi vfat rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=ascii,shortname=mixed,utf8,errors=remount-ro 0 2
LABEL=SWAP none swap defaults 0 0
EOF
echo "done."

echo -n "Setting hostname... "
echo "$HOSTNAME" > /mnt/etc/hostname
cat <<EOF > /mnt/etc/hosts
127.0.0.1 localhost
::1 localhost
127.0.1.1 $HOSTNAME.localdomain $HOSTNAME
EOF
arch-chroot /mnt hostnamectl set-hostname $HOSTNAME
echo "done."

echo "Localizing system..."
arch-chroot /mnt ln -sf /usr/share/zoneinfo/$TIMEZONE /etc/localtime
arch-chroot /mnt timedatectl set-timezone $TIMEZONE
echo "* Timezone set."
arch-chroot /mnt hwclock --systohc
echo "* Synced system clock to hardware clock."
cat <<EOF > /mnt/etc/locale.gen
en_US.UTF-8 UTF-8
ar_JO.UTF-8 UTF-8
EOF
arch-chroot /mnt locale-gen
echo "LANG=en_US.UTF-8" > /mnt/etc/locale.conf
arch-chroot /mnt localectl set-locale en_US.UTF-8
echo "* Locale generated and applied."

echo "Avoid timeout -- press Enter when you are ready"
read TIMEOUT

echo "Setting up users..."
zfs create rpool/DATA/home/$USERNAME
arch-chroot /mnt useradd -m -G users,wheel,ftp,http,sys,audio,realtime,docker -s /bin/bash "$USERNAME"
sudo chown -R $USERNAME:$USERNAME /mnt/home/$USERNAME
echo "* Created user $USERNAME."
arch-chroot /mnt passwd $USERNAME
arch-chroot /mnt passwd
echo "* Set passwords."

echo -n "Enabling system services... "
arch-chroot /mnt /bin/bash <<EOF
systemctl enable NetworkManager
systemctl enable systemd-timesyncd
systemctl enable cups
systemctl enable gdm
EOF
echo "done."

echo -n "Changing configuration values... "
sed -i 's/^#Color/Color/g' /mnt/etc/pacman.conf
sed -i 's/#ParallelDownloads = 5/ParallelDownloads = 20/' /mnt/etc/pacman.conf
sed -i "/\[multilib\]/,/Include/"'s/^#//' /mnt/etc/pacman.conf
echo '%wheel      ALL=(ALL) ALL' > /mnt/etc/sudoers.d/wheel
echo "FONT=\"ter-v32b\"" > /mnt/etc/vconsole.conf
cat <<EOF > /mnt/etc/environment
EDITOR=nano
SWEETHOME3D_JAVA3D=1.5
EOF
echo "done."

echo "Installing AUR helper..."
arch-chroot /mnt /bin/bash <<EOF
git clone https://aur.archlinux.org/yay-bin.git
chmod -R 777 /yay-bin
cd /yay-bin
sudo -u $USERNAME makepkg -si --noconfirm
cd ..
rm -r /yay-bin
sudo -u $USERNAME yay --gendb
sudo -u $USERNAME yay --devel --nodiffmenu --save
exit
EOF

echo "Installing AUR packages..."
arch-chroot /mnt /bin/bash <<EOF
sudo -u $USERNAME yay -S $AUR
exit
EOF

#lpadmin -p MFC7840W -E -v socket://192.168.1.15:9100 -P /usr/share/cups/model/MFC7840W.ppd



echo "Doing ZFS-y things..."
sed -i 's/^HOOKS=\(.*\)/HOOKS=\(base udev autodetect modconf block keyboard zfs filesystems\)/g' /mnt/etc/mkinitcpio.conf
zgenhostid $(hostid)
systemctl enable zfs-import-scan zfs-import-cache zfs-import.target zfs-zed zfs.target --root=/mnt
systemctl enable zfs-mount --root=/mnt
curl -L https://archzfs.com/archzfs.gpg |  pacman-key -a -
curl -L https://git.io/JsfVS | xargs -i{} pacman-key --lsign-key {}
curl -L https://git.io/Jsfw2 > /mnt/etc/pacman.d/mirrorlist-archzfs
echo "[archzfs]
Include = /etc/pacman.d/mirrorlist-archzfs
#[archzfs-testing]
#Include = /etc/pacman.d/mirrorlist-archzfs" >> /mnt/etc/pacman.conf
arch-chroot /mnt pacman -Sy
echo 'export ZPOOL_VDEV_NAME_PATH=1' >> /etc/profile.d/zfs
echo 'Defaults env_keep += "ZPOOL_VDEV_NAME_PATH"' > /mnt/etc/sudoers.d/zfs

echo "Wait here"
read VERIFY

echo "Installing bootloader..."
arch-chroot /mnt /bin/bash <<EOF
mkdir -p /boot/efi/EFI/zbm
curl https://github.com/zbm-dev/zfsbootmenu/releases/download/v2.0.0/zfsbootmenu-release-vmlinuz-x86_64-v2.0.0.EFI -o /boot/efi/EFI/zbm/zfsbootmenu.EFI
efibootmgr --disk $DEV --part 1 --create --label "ZFSBootMenu 2.0.0" --loader '\EFI\zbm\zfsbootmenu.EFI' --unicode "spl_hostid=$(hostid) zbm.timeout=3 zbm.prefer=rpool zbm.import_policy=hostid" --verbose
zfs set org.zfsbootmenu:commandline="rw" rpool/ROOT
refind-install
EOF
mkdir -p /mnt/etc/pacman.d/hooks
cat <<EOF > /mnt/etc/pacman.d/hooks/refind.hook
[Trigger]
Operation=Upgrade
Type=Package
Target=refind

[Action]
Description = Updating rEFInd on ESP
When=PostTransaction
Exec=/usr/bin/refind-install
EOF

echo "Did that work?"
read VERIFY

echo "Enabling Early KMS for GPU..."
sed -i 's/^MODULES=.*/MODULES=(i915)/' /mnt/etc/mkinitcpio.conf
arch-chroot /mnt /bin/bash <<EOF
mkinitcpio -P
exit
EOF

echo "Installing vala-panel-appmenu-xfce from AUR because building it fails..."
arch-chroot /mnt /bin/bash <<EOF
cd /home/$USERNAME/
mkdir -p build
cd build
sudo -u $USERNAME yay -G vala-panel-appmenu
cd vala-panel-appmenu
sed -i '_disable_mate=false/s/false/true' PKGBUILD
sed -i '_disable_vala=false/s/false/true' PKGBUILD
sed -i '_disable_budgie=false/s/false/true' PKGBUILD
sudo -u $USERNAME makepkg -sic --noconfirm
EOF

echo "Taking snapshot of install..."
zpool set cachefile=/etc/zfs/zpool.cache rpool
mkdir -p /mnt/etc/zfs
cp /etc/zfs/zpool.cache /mnt/etc/zfs/zpool.cache
zfs snapshot -r rpool@install

echo "Unmounting..."
sleep 5
umount /mnt/boot/efi
zfs umount -a
zpool export rpool

echo "Done! You may now reboot."
