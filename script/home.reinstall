#!/bin/bash
BASE="
base base-devel linux linux-lts linux-headers linux-lts-headers linux-firmware
bash nano openssh wget git zip unzip unrar nmap htop
intel-ucode vulkan-intel
networkmanager nm-connection-editor network-manager-applet dnsmasq
ntfs-3g exfat-utils snapraid mergerfs
youtube-dl hugo zola archey3
docker docker-compose nginx certbot certbot-nginx
"
AUR="
brother-mfc-7840w brscan3
"

USERNAME=trwnh

echo "Enter a password:"
read PASSWORD

DEVICE=/dev/nvme0n1

echo "Making partitions..."
sgdisk -Z $DEVICE
parted -s $DEVICE mklabel gpt
sgdisk -n 1:0:+512M -t 1:ef00 -c 1:"ESP" $DEVICE \
       -n 2:0:0 -t 2:8300 -c 2:"Root" $DEVICE
partprobe $DEVICE
echo "Making filesystems..."
mkfs.fat -F32 -n "EFI" /dev/disk/by-partlabel/ESP
mkfs.ext4 -L "Arch" -F /dev/disk/by-partlabel/Root
echo "Drive setup done."

lsblk -f $DEVICE
fdisk -l $DEVICE
read -p "Does this look right? Hit [enter] to move on if so, otherwise quit and start over" CONFIRM

echo -n "Mounting partitions..."
mkdir -p /mnt/install
mount -L "Arch" /mnt/install
mkdir -p /mnt/install/boot
mount -L "EFI" /mnt/install/boot
echo "done."

echo "Bootstrapping mounted system..."
pacstrap /mnt/install $BASE
echo "Packages installed."

echo "Copying files over from old install..."
cat /etc/fstab > /mnt/install/etc/fstab
cat /etc/snapraid.conf > /mnt/install/etc/snapraid.conf
cat /etc/systemd/network/00-br0.netdev > /mnt/install/etc/systemd/network/00-br0.netdev
cat /etc/systemd/network/10-bind.network > /mnt/install/etc/systemd/network/10-bind.network
cat /etc/systemd/network/20-bridge.network > /mnt/install/etc/systemd/network/20-bridge.network
echo "home" > /mnt/install/etc/hostname
cat /etc/hosts > /mnt/install/etc/hosts
cat /etc/dnsmasq.conf > /mnt/install/etc/dnsmasq.conf
cat /etc/nginx/nginx.conf > /mnt/etc/nginx/nginx.conf
cat /etc/samba/smb.conf > /mnt/etc/samba/smb.conf
cat /etc/exports > /mnt/etc/exports
cp -rfv /etc/nginx/sites /mnt/etc/nginx/sites
cp -rfv /etc/nginx/snippets /mnt/etc/nginx/snippets
cp -rfv /home/trwnh /mnt/home/trwnh
echo "done."

echo -n "Setting up DNS... "


echo "Localizing system..."
arch-chroot /mnt/install ln -sf /usr/share/zoneinfo/America/Chicago /etc/localtime
echo "Timezone set."
arch-chroot /mnt/install hwclock --systohc
echo "Synced system clock to hardware clock."
echo "en_US.UTF-8 UTF-8
ar_JO.UTF-8 UTF-8" > /mnt/install/etc/locale.gen
arch-chroot /mnt/install locale-gen
echo "LANG=en_US.UTF-8" > /mnt/install/etc/locale.conf
echo "Locale generated and applied."

echo "Installing bootloader..."
arch-chroot /mnt/install bootctl install
cat <<EOF > /mnt/install/boot/loader/entries/arch.conf
title Arch Linux
linux /vmlinuz-linux
initrd /intel-ucode.img
initrd /initramfs-linux.img
options root=LABEL=Arch rw
EOF
cat <<EOF > /mnt/install/boot/loader/entries/arch-lts.conf
title Arch Linux (LTS)
linux /vmlinuz-linux-lts
initrd /intel-ucode.img
initrd /initramfs-linux-lts.img
options root=LABEL=Arch rw
EOF
cat <<EOF > /mnt/install/boot/loader/loader.conf
default arch
timeout 5
auto-entries
auto-firmware
editor yes
EOF
echo "Loader files written."

read -p "To avoid having passwd timeout, press [enter] to continue when you're ready to input:" waitforinput

echo "Setting up users..."
arch-chroot /mnt/install useradd -m -g users -G wheel,ftp,http,sys,docker -s /bin/bash "$USERNAME"
echo "Created user $USERNAME."
arch-chroot /mnt/install echo "$USERNAME:$PASSWORD" | chpasswd
arch-chroot /mnt/install echo "root:$PASSWORD" | chpasswd

echo -n "Changing configuration values... "
sed -i '/#Color/s/^#//g' /mnt/install/etc/pacman.conf
sed -i '/#\s%wheel\sALL=(ALL)\sALL/s/^#//g' /mnt/install/etc/sudoers
echo "EDITOR=nano" > /mnt/install/etc/environment
sed -i "/\[multilib\]/,/Include/"'s/^#//' /mnt/install/etc/pacman.conf
# sed -i '/#PubKeyAuthentication/s/^#//g' /mnt/etc/ssh/sshd_config
# sed -i '/PubKeyAuthentication/s/yes/no/g' /mnt/etc/ssh/sshd_config

echo "done."

echo -n "Enabling system services... "
arch-chroot /mnt /bin/bash <<EOF
systemctl enable NetworkManager
systemctl enable systemd-timesyncd
systemctl enable dnsmasq
systemctl enable sshd
systemctl enable nginx
systemctl enable docker
EOF
echo "done."

echo "Installing AUR helper..."
arch-chroot /mnt /bin/bash <<EOF
git clone https://aur.archlinux.org/yay-bin.git
chmod -R 777 /yay-bin
cd /yay-bin
sudo -u $USERNAME makepkg -si --noconfirm
cd ..
rm -r /yay-bin
sudo -u $USERNAME yay --gendb
sudo -u $USERNAME yay --devel --nodiffmenu --save
exit
EOF

echo "Installing AUR packages..."
arch-chroot /mnt /bin/bash <<EOF
sudo -u $USERNAME yay -S $AUR
exit
EOF

lpadmin -p MFC7840W -E -v socket://192.168.1.15:9100 -P /usr/share/cups/model/MFC7840W.ppd

echo "Enabling Early KMS for GPU..."
sed -i 's/MODULES=\(\)/MODULES=(i915)/g' /mnt/etc/mkinitcpio.conf
arch-chroot /mnt /bin/bash <<EOF
mkinitcpio -p linux
mkinitcpio -p linux-lts
exit
EOF

echo "Installation finished! You can now unmount and reboot."
